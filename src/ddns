#!/usr/bin/env python3
import os
import sys
import argparse
import json
import requests

PROFILE_PATH = "profiles"
PUBLIC_IP_RESPONSER = "https://api.ipify.org?format=json"

class HetznerDDNS:
    def __init__(self) -> None:
        if not os.path.exists(PROFILE_PATH):
            os.makedirs(PROFILE_PATH)

    def interactive(self, data: dict = None) -> None:
        count = 0
        for x in data:
            count += 1
            name = x["name"]
            print(f"[{count}] {name}")
        choose = int(input("Choose: "))
        choose = choose - 1
        return data[choose]

    def check(self) -> bool:
        if os.path.exists(self.path):
            return True
        else:
            return False

    def get(self) -> dict:
        with open(self.path, "r") as f:
            return json.load(f)

    def write(self, data: dict = None) -> None:
        data = json.dumps(data)
        with open(self.path, "w") as f:
            f.write(data)
            f.close()
        return data

    def init(self, name: str = "default") -> dict:
        self.path = f"{PROFILE_PATH}/{name}.json"
        if self.check():
            DATA = self.get()
        else:
            API_KEY = input("Please enter your API Key: ")
            result = (requests.get("https://dns.hetzner.com/api/v1/zones", headers={ "Auth-API-Token": API_KEY }).json())
            ZONE = self.interactive(data=result["zones"])
            result = (requests.get("https://dns.hetzner.com/api/v1/records", headers={ "Auth-API-Token": API_KEY }).json())
            RECORD = self.interactive(data=result["records"])

            DATA = self.write(data={
                "api_key": API_KEY,
                "zone": {
                    "id": ZONE["id"]
                },
                "record": {
                    "id": RECORD["id"],
                    "type": RECORD["type"],
                    "name": RECORD["name"]
                }
            })
        return DATA

    def update(self, name: str = "default") -> bool:
        self.path = f"{PROFILE_PATH}/{name}.json"
        if self.check():
            DATA = self.get()
        else:
            DATA = self.init(name)
        API_KEY = DATA["api_key"]
        RECORD = DATA["record"]
        ZONE = DATA["zone"]
        PUBLIC_IP = requests.get(PUBLIC_IP_RESPONSER).json()["ip"]
        data = json.dumps({
            "value": PUBLIC_IP,
            "ttl": 86400,
            "type": RECORD["type"],
            "name": RECORD["name"],
            "zone_id": ZONE["id"]
        })
        result = requests.put(f"https://dns.hetzner.com/api/v1/records/{RECORD['id']}", data=data, headers={ "Auth-API-Token": API_KEY })
        if result.status_code == 200:
            return True
        else:
            return False

    def remove(self, name: str = "default") -> bool:
        self.path = f"{PROFILE_PATH}/{name}.json"
        try:
            os.remove(f"{PROFILE_PATH}/{name}.json")
            return True
        except OSError:
            return False


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="Hetzner DDNS", 
        description="Hetzner Dynamic DNS Service",
        add_help=True
    )
    sub = parser.add_subparsers(dest="command")
    profile = sub.add_parser("profile")
    profile_cmd = profile.add_mutually_exclusive_group()
    profile_cmd.add_argument("--init", type=str, dest="init", help="Initalize a new profile", metavar="name")
    profile_cmd.add_argument("--rm", type=str, dest="remove", help="Remove a profile", metavar="name")
    profile_cmd.add_argument("--update", type=str, dest="update", help="Update a profile", metavar="name")

    args = parser.parse_args()

    ddns = HetznerDDNS()

    if args.command == "profile":
        if args.init:
            ddns.init(args.init)
        if args.remove:
            if ddns.remove(args.remove):
                print(f"Profile {args.remove} deleted!")
            else:
                print(f"Profile {args.remove} couldn't deleted!")
        if args.update:
            if ddns.update(args.update):
                print("Record updated!")
            else:
                print("Record couldn't updated!")